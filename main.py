# -*- coding: utf-8 -*-
"""main

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1K1JeXwtMgZ01UXLW6h0GupjiPb6u-m0O
"""

from models import *
from util import *
import torch
import torch.optim as optim
from torch.autograd import Variable
from torch.utils.data import DataLoader
import argparse

def arg_parse():
  parser=argparse.ArgumentParser(description="YOLO3")
  parser.add_argument("--nms_thresh",dest="nms_thresh",default=.4,type=float)
  parser.add_argument("--conf",default=.5,type=float)
  parser.add_argument("--reso",dest="reso",default="416",type=str)
  parser.add_argument("--config_path",default="config/yolov3",type=str)
  parser.add_argument("--weight_path",default="weight/yolov3",type=str)
  parser.add_argument("--image_path",default="image/yolov3",type=str)
  parser.add_argument("--target_path",default="target/yolov3",type=str)
  parser.add_argument("--n_epoch",default=100,type=int)
  parser.add_argument("--n_batch",default=10,type=int)
  parser.add_argument("--write_file",default="write",type=str)
  parser.add_argument("--learning_rate",default=.01,type=float)
  parser.add_argument("--decay_weight",default=.1,type=float)
  return parser.parse_args()
parser=arg_parse()
config_path=parser["config_path"]
image_path=parser["image_path"]
target_path=parser["target_path"]
weight_path=parser["weight_path"]
decay_weight=parser["decay_weight"]
learning_rate=parser["learning_rate"]
n_epoch=parser["n_epoch"]
n_batch=parser["n_batch"]
conf=parser["conf"]
nms_thresh=parser["nms_thresh"]
write_file=parser["write_file"]

model=Darknet(config_path)
model.load_weights(weight_path)
dataset=DataLoader(loadingdata(image_path,target_path),nb,shuffle=False)
optimizer=optim.Adam(filter(lambda p: p.requires_grads,model.parameters()),learning_rate=learning_rate,weight_decay=decay_weight)
for i in range(epoches):
  for j,(image,target) in enumerate(dataset):
    image=torch.cuda.FloatTensor(image)
    target=torch.cuda.FloatTensor(target)
    optimizer.zero_grad()
    loss=model(image,target)
    loss.backward()
    optimizer.step()
    print("%d/%d batch %d/%d epoch %.5f" %(j,n_batch,i,n_epoch,loss))
  if i%10==0:
    model.write_weights(os.path.join(write_file,i))

